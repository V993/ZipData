{"version":3,"sources":["logo.svg","components/ZipSearchAPI.js","components/CitySearchAPI.js","App.js","reportWebVitals.js","index.js"],"names":["ZipSearchAPI","props","handleInputChange","event","setState","zipcode","target","value","handleSearchClick","a","state","linkToAPI","axios","get","response","apiData","data","found","console","log","status","makeTable","currData","foundMatch","table","i","forEach","zip","zipcodeId","recordNumber","city","City","State","totalWages","TotalWages","lon","Long","lat","Lat","population","EstimatedPopulation","push","className","latitude","longitude","wages","type","this","onChange","placeholder","onClick","id","Component","CitySearchAPI","toUpperCase","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac5ad15b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./style.css\"\n\nclass ZipSearchAPI extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      apiData: [],\n      found: false,\n      zipcode: \"\",\n      city: \"\",\n      state: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      population: \"\",\n      wages: \"\",\n    };\n  }\n\n  handleInputChange = (event) => {\n    this.setState({ zipcode: event.target.value });\n  };\n\n  handleSearchClick = async () => {\n    let zipcode = this.state.zipcode;\n    let linkToAPI = \"https://ctp-zip-api.herokuapp.com/zip/\" + zipcode;\n\n    try {\n      let response = await axios.get(linkToAPI);\n      this.setState({ apiData: response.data, found: true });\n    } catch (error) {\n      if (error.response) {\n        /*\n         * The request was made and the server responded with a\n         * status code that falls out of the range of 2xx\n         */\n        console.log(error.response.data); //Not Found\n        console.log(error.response.status); //404\n        this.setState({ found: false });\n      }\n    }\n  };\n\n  makeTable = () => {\n    let currData = this.state.apiData;\n    let foundMatch = this.state.found;\n    let table = [];\n    console.log(currData);\n    //found is false when we get 404 error\n    if (!foundMatch) {\n      table.push(\n        <tr key={ -1 }>\n          <td>No Results</td>\n        </tr>\n      );\n      return table;\n    } else {\n      let i = 0;\n      currData.forEach(zip => {\n        let zipcodeId = currData[i].recordNumber;\n        // let zipcode = currData[i].Zipcode;\n        let city = currData[i].City;\n        let state = currData[i].State;\n        let totalWages = currData[i].TotalWages;\n        let lon = currData[i].Long;\n        let lat = currData[i].Lat;\n\n        let population = currData[i].EstimatedPopulation;\n        table.push(\n          <div className=\"box\">\n            <tr key={ zipcodeId }>\n              <tr>\n                <td>{ city }</td>\n              </tr>\n\n              <tr>\n                <td>State: { state }</td>\n              </tr>\n              <tr>\n                <td>Location: ( { lat } , { lon } )</td>\n              </tr>\n              <tr>\n                <td>Population: { population }</td>\n              </tr>\n\n              <tr>\n                <td>Total Wages: { totalWages }</td>\n              </tr>\n            </tr>\n\n\n          </div>\n\n        );\n        i++;\n      });\n      return table;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"search\">\n          <h3>Search by zipcode:</h3>\n          <input\n            type=\"text\"\n            value={ this.state.zipcode }\n            onChange={ this.handleInputChange }\n            placeholder=\"Enter zipcode\"\n          />\n          <button className=\"search-button\" onClick={ this.handleSearchClick }>\n            Search\n          </button>\n        </div>\n\n        <br />\n\n        <table id=\"data\">\n          <tbody>{ this.makeTable() }</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default ZipSearchAPI;\n","import { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nclass CitySearchAPI extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            apiData: [],\r\n            found: false,\r\n            zipcode: \"\",\r\n            city: \"\",\r\n            state: \"\",\r\n            latitude: \"\",\r\n            longitude: \"\",\r\n            population: \"\",\r\n            wages: \"\",\r\n        };\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({ city: (event.target.value).toUpperCase() });\r\n    };\r\n\r\n    handleSearchClick = async () => {\r\n        let city = this.state.city;\r\n        let linkToAPI = \"https://ctp-zip-api.herokuapp.com/city/\" + city;\r\n\r\n        try {\r\n            let response = await axios.get(linkToAPI);\r\n            this.setState({ apiData: response.data, found: true });\r\n        } catch (error) {\r\n            if (error.response) {\r\n                /*\r\n                 * The request was made and the server responded with a\r\n                 * status code that falls out of the range of 2xx\r\n                 */\r\n                console.log(error.response.data); //Not Found\r\n                console.log(error.response.status); //404\r\n                this.setState({ found: false });\r\n            }\r\n        }\r\n    };\r\n\r\n    makeTable = () => {\r\n        let currData = this.state.apiData;\r\n        let foundMatch = this.state.found;\r\n        let table = [];\r\n        console.log(currData);\r\n        //found is false when we get 404 error\r\n        if (!foundMatch) {\r\n            table.push(\r\n                <tr key={ -3 }>\r\n                    <td>No Results</td>\r\n                </tr>\r\n            );\r\n            return table;\r\n        } else {\r\n            let i = 0;\r\n            currData.forEach(zip => {\r\n                i++;\r\n                table.push(\r\n                    <tr key={ i }>\r\n                        <td>Zipcode { i }: { zip }</td>\r\n                    </tr>\r\n                );\r\n            });\r\n            return table;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"search\">\r\n                    <h3>Search by city:</h3>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={ this.state.city }\r\n                        onChange={ this.handleInputChange }\r\n                        placeholder=\"Enter city\"\r\n                    />\r\n                    <button className=\"search-button\" onClick={ this.handleSearchClick }>\r\n                        Search\r\n                    </button>\r\n                </div>\r\n\r\n                <table id=\"data\">\r\n                    <tbody>{ this.makeTable() }</tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CitySearchAPI;","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport ZipSearchAPI from \"./components/ZipSearchAPI\";\nimport CitySearchAPI from \"./components/CitySearchAPI\"\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n      <ZipSearchAPI />\n      <CitySearchAPI />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}